//Bootstrap Code
@256
D=A
@SP
M=D
//call sys.init0)

//PUSH argument 1
@1
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1

//POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D

//PUSH constant 0
@0
D=A
@SP
A=M
M=D
@SP
M=M+1

//POP that 0
@SP
AM=M-1
D=M
@THAT
A=M
M=D

//PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1

//POP that 1
@1
D=A
@THAT
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D

//PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1

//PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1

// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D

//POP argument 0
@SP
AM=M-1
D=M
@ARG
A=M
M=D

//Label MAIN_LOOP_START
(MAIN_LOOP_START)

//PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1

//if-goto COMPUTE_ELEMENT 
@SP
AM=M-1
D=M
@COMPUTE_ELEMENT 
D;JNE

//goto END_PROGRAM 
@END_PROGRAM 
0;JMP

//Label COMPUTE_ELEMENT
(COMPUTE_ELEMENT)

//PUSH that 0
@0
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1

//PUSH that 1
@1
D=A
@THAT
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1

// add
@SP
AM=M-1
D=M
A=A-1
M=M+D

//POP that 2
@2
D=A
@THAT
D=D+M
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D

//PUSH pointer 1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1

//PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1

// add
@SP
AM=M-1
D=M
A=A-1
M=M+D

//POP pointer 1
@SP
AM=M-1
D=M
@THAT
M=D

//PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1

//PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1

// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D

//POP argument 0
@SP
AM=M-1
D=M
@ARG
A=M
M=D

//goto MAIN_LOOP_START
@MAIN_LOOP_START
0;JMP

//Label END_PROGRAM
(END_PROGRAM)

//END LOOP
(END)
@END
0;JMP