//Bootstrap Code
@256
D=A
@SP
M=D

//CallSys.init0 (push return add, save frame, repoint ARG and LCL) 
@Sys.init.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@5
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D

//goto Sys.init
@Sys.init
0;JMP

 //Return Address Label
(Sys.init.0)

 //function Main.fibonacci 0
(Main.fibonacci)

//PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1

//PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1

// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.0
D;JLT
@SP
A=M-1
M=0
@NEXT.0
0;JMP
(TRUE.0)
@SP
A=M-1
M=-1
(NEXT.0)

//if-goto IF_TRUE
@SP
AM=M-1
D=M
@IF_TRUE
D;JNE

//goto IF_FALSE
@IF_FALSE
0;JMP

//Label IF_TRUE 
(IF_TRUE )

//PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1

//Return 
@LCL
D=M
@endFrame
M=D
@5
A=D-A
D=M
@retAdd
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@endFrame
A=M-1
D=M
@THAT
M=D
@2
D=A
@endFrame
A=M-D
D=M
@THIS
M=D
@3
D=A
@endFrame
A=M-D
D=M
@ARG
M=D
@4
D=A
@endFrame
A=M-D
D=M
@LCL
M=D
@retAdd
A=M
0;JMP

//Label IF_FALSE 
(IF_FALSE )

//PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1

//PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1

// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D

//CallMain.fibonacci1 (push return add, save frame, repoint ARG and LCL) 
@Main.fibonacci.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D

//goto Main.fibonacci
@Main.fibonacci
0;JMP

 //Return Address Label
(Main.fibonacci.1)

//PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1

//PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1

// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D

//CallMain.fibonacci1 (push return add, save frame, repoint ARG and LCL) 
@Main.fibonacci.2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D

//goto Main.fibonacci
@Main.fibonacci
0;JMP

 //Return Address Label
(Main.fibonacci.2)

// add
@SP
AM=M-1
D=M
A=A-1
M=M+D

//Return 
@LCL
D=M
@endFrame
M=D
@5
A=D-A
D=M
@retAdd
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@endFrame
A=M-1
D=M
@THAT
M=D
@2
D=A
@endFrame
A=M-D
D=M
@THIS
M=D
@3
D=A
@endFrame
A=M-D
D=M
@ARG
M=D
@4
D=A
@endFrame
A=M-D
D=M
@LCL
M=D
@retAdd
A=M
0;JMP

 //function Sys.init 0
(Sys.init)

//PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1

//CallMain.fibonacci1 (push return add, save frame, repoint ARG and LCL) 
@Main.fibonacci.3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@6
D=A
@SP
D=M-D
@ARG
M=D
@SP
D=M
@LCL
M=D

//goto Main.fibonacci
@Main.fibonacci
0;JMP

 //Return Address Label
(Main.fibonacci.3)

//Label WHILE
(WHILE)

//goto WHILE 
@WHILE 
0;JMP

//END LOOP
(END)
@END
0;JMP