//Bootstrap Code
@256
D=A
@SP
M=D
//call sys.init0)

 //function Main.fibonacci 0
(Main.fibonacci)

//PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1

//PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1

// lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.0
D;JLT
@SP
A=M-1
M=0
@NEXT.0
0;JMP
(TRUE.0)
@SP
A=M-1
M=-1
(NEXT.0)

//if-goto IF_TRUE
@SP
AM=M-1
D=M
@IF_TRUE
D;JNE

//goto IF_FALSE
@IF_FALSE
0;JMP

//Label IF_TRUE 
(IF_TRUE )

//PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1

//Label IF_FALSE 
(IF_FALSE )

//PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1

//PUSH constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1

// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D

//PUSH argument 0
@0
D=A
@ARG
A=M+D
D=M
@SP
A=M
M=D
@SP
M=M+1

//PUSH constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1

// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D

// add
@SP
AM=M-1
D=M
A=A-1
M=M+D

 //function Sys.init 0
(Sys.init)

//PUSH constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1

//Label WHILE
(WHILE)

//goto WHILE 
@WHILE 
0;JMP

//END LOOP
(END)
@END
0;JMP