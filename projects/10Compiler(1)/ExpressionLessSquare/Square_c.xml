<class>
	<keyword> class <keyword>
	<IDENTIFIER> Square <IDENTIFIER>
	<symbol> { <symbol>
	<classVarDec>
		<keyword> field <keyword>
		<keyword> int <keyword>
		<IDENTIFIER> x <IDENTIFIER>
		<symbol> , <symbol>
		<IDENTIFIER> y <IDENTIFIER>
		<symbol> ; <symbol>
	</classVarDec>
	<classVarDec>
		<keyword> field <keyword>
		<keyword> int <keyword>
		<IDENTIFIER> size <IDENTIFIER>
		<symbol> ; <symbol>
	</classVarDec>
	<subroutineDec>
		<keyword> constructor <keyword>
		<IDENTIFIER> Square <IDENTIFIER>
		<IDENTIFIER> new <IDENTIFIER>
		<symbol> ( <symbol>
		<ParameterList>
			<keyword> int <keyword>
			<IDENTIFIER> Ax <IDENTIFIER>
			<symbol> , <symbol>
			<keyword> int <keyword>
			<IDENTIFIER> Ay <IDENTIFIER>
			<symbol> , <symbol>
			<keyword> int <keyword>
			<IDENTIFIER> Asize <IDENTIFIER>
		</ParameterList>
		<symbol> ) <symbol>
		<SubroutineBody>
			<symbol> { <symbol>
			<statements>
				<letStatement>
					<keyword> let <keyword>
					<IDENTIFIER> x <IDENTIFIER>
					<symbol> = <symbol>
					<expression>
						<IDENTIFIER> Ax <IDENTIFIER>
					</expression>
					<symbol> ; <symbol>
				</letStatement>
				<letStatement>
					<keyword> let <keyword>
					<IDENTIFIER> y <IDENTIFIER>
					<symbol> = <symbol>
					<expression>
						<IDENTIFIER> Ay <IDENTIFIER>
					</expression>
					<symbol> ; <symbol>
				</letStatement>
				<letStatement>
					<keyword> let <keyword>
					<IDENTIFIER> size <IDENTIFIER>
					<symbol> = <symbol>
					<expression>
						<IDENTIFIER> Asize <IDENTIFIER>
					</expression>
					<symbol> ; <symbol>
				</letStatement>
				<doStatement>
					<keyword> do <keyword>
					<IDENTIFIER> draw <IDENTIFIER>
					<symbol> ( <symbol>
					<symbol> ) <symbol>
					<symbol> ; <symbol>
				</doStatement>
				<returnStatement>
					<keyword> return <keyword>
					<expression>
						<IDENTIFIER> x <IDENTIFIER>
					</expression>
					<symbol> ; <symbol>
				</returnStatement>
			</statements>
			<symbol> } <symbol>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method <keyword>
		<keyword> void <keyword>
		<IDENTIFIER> dispose <IDENTIFIER>
		<symbol> ( <symbol>
		<ParameterList>
		</ParameterList>
		<symbol> ) <symbol>
		<SubroutineBody>
			<symbol> { <symbol>
			<statements>
				<doStatement>
					<keyword> do <keyword>
					<IDENTIFIER> Memory <IDENTIFIER>
					<symbol> . <symbol>
					<IDENTIFIER> deAlloc <IDENTIFIER>
					<symbol> ( <symbol>
					<keyword> this <keyword>
					<symbol> ) <symbol>
				</doStatement>
			</statements>
			<keyword> return <keyword>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<symbol> ; <symbol>
		<symbol> } <symbol>
		<keyword> method <keyword>
		<keyword> void <keyword>
		<ParameterList>
		</ParameterList>
		<symbol> ( <symbol>
		<SubroutineBody>
			<symbol> ) <symbol>
			<statements>
			</statements>
			<keyword> do <keyword>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<IDENTIFIER> Screen <IDENTIFIER>
		<symbol> . <symbol>
		<IDENTIFIER> setColor <IDENTIFIER>
		<symbol> ( <symbol>
		<ParameterList>
		</ParameterList>
		<symbol> ) <symbol>
		<SubroutineBody>
			<symbol> ; <symbol>
			<statements>
				<doStatement>
					<keyword> do <keyword>
					<IDENTIFIER> Screen <IDENTIFIER>
					<symbol> . <symbol>
					<IDENTIFIER> drawRectangle <IDENTIFIER>
					<symbol> ( <symbol>
					<IDENTIFIER> x <IDENTIFIER>
					<symbol> , <symbol>
				</doStatement>
			</statements>
			<symbol> , <symbol>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<IDENTIFIER> x <IDENTIFIER>
		<symbol> , <symbol>
		<IDENTIFIER> y <IDENTIFIER>
		<symbol> ) <symbol>
		<ParameterList>
		</ParameterList>
		<keyword> return <keyword>
		<SubroutineBody>
			<symbol> ; <symbol>
			<symbol> } <symbol>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method <keyword>
		<keyword> void <keyword>
		<IDENTIFIER> erase <IDENTIFIER>
		<symbol> ( <symbol>
		<ParameterList>
		</ParameterList>
		<symbol> ) <symbol>
		<SubroutineBody>
			<symbol> { <symbol>
			<statements>
				<doStatement>
					<keyword> do <keyword>
					<IDENTIFIER> Screen <IDENTIFIER>
					<symbol> . <symbol>
					<IDENTIFIER> setColor <IDENTIFIER>
					<symbol> ( <symbol>
					<IDENTIFIER> x <IDENTIFIER>
					<symbol> ) <symbol>
				</doStatement>
			</statements>
			<keyword> do <keyword>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<IDENTIFIER> Screen <IDENTIFIER>
		<symbol> . <symbol>
		<IDENTIFIER> drawRectangle <IDENTIFIER>
		<symbol> ( <symbol>
		<ParameterList>
		</ParameterList>
		<symbol> , <symbol>
		<SubroutineBody>
			<IDENTIFIER> y <IDENTIFIER>
			<statements>
			</statements>
			<IDENTIFIER> x <IDENTIFIER>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<symbol> , <symbol>
		<IDENTIFIER> y <IDENTIFIER>
		<symbol> ) <symbol>
		<symbol> ; <symbol>
		<ParameterList>
			<keyword> return <keyword>
			<symbol> ; <symbol>
			<symbol> } <symbol>
			<keyword> method <keyword>
			<keyword> void <keyword>
			<IDENTIFIER> incSize <IDENTIFIER>
		</ParameterList>
		<symbol> ) <symbol>
		<SubroutineBody>
			<symbol> { <symbol>
			<statements>
				<ifStatement>
					<keyword> if <keyword>
					<symbol> ( <symbol>
					<expression>
						<IDENTIFIER> x <IDENTIFIER>
					</expression>
					<IDENTIFIER> x <IDENTIFIER>
					<symbol> ) <symbol>
					<statements>
					</statements>
					<keyword> do <keyword>
				</ifStatement>
			</statements>
			<symbol> ( <symbol>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<symbol> ) <symbol>
		<symbol> ; <symbol>
		<keyword> let <keyword>
		<IDENTIFIER> size <IDENTIFIER>
		<ParameterList>
		</ParameterList>
		<IDENTIFIER> size <IDENTIFIER>
		<SubroutineBody>
			<symbol> ; <symbol>
			<statements>
				<doStatement>
					<keyword> do <keyword>
					<IDENTIFIER> draw <IDENTIFIER>
					<symbol> ( <symbol>
					<symbol> ) <symbol>
					<symbol> ; <symbol>
				</doStatement>
			</statements>
			<keyword> return <keyword>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<symbol> ; <symbol>
		<symbol> } <symbol>
		<keyword> method <keyword>
		<keyword> void <keyword>
		<ParameterList>
		</ParameterList>
		<symbol> ( <symbol>
		<SubroutineBody>
			<symbol> ) <symbol>
			<statements>
			</statements>
			<keyword> if <keyword>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<symbol> ( <symbol>
		<IDENTIFIER> size <IDENTIFIER>
		<symbol> ) <symbol>
		<symbol> { <symbol>
		<ParameterList>
			<keyword> do <keyword>
			<IDENTIFIER> erase <IDENTIFIER>
			<symbol> ( <symbol>
		</ParameterList>
		<symbol> ) <symbol>
		<SubroutineBody>
			<symbol> ; <symbol>
			<statements>
				<letStatement>
					<keyword> let <keyword>
					<IDENTIFIER> size <IDENTIFIER>
					<symbol> = <symbol>
					<expression>
						<IDENTIFIER> size <IDENTIFIER>
					</expression>
					<symbol> ; <symbol>
				</letStatement>
				<doStatement>
					<keyword> do <keyword>
					<IDENTIFIER> draw <IDENTIFIER>
					<symbol> ( <symbol>
					<symbol> ) <symbol>
					<symbol> ; <symbol>
				</doStatement>
			</statements>
			<keyword> return <keyword>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<symbol> ; <symbol>
		<symbol> } <symbol>
		<keyword> method <keyword>
		<keyword> void <keyword>
		<ParameterList>
		</ParameterList>
		<symbol> ( <symbol>
		<SubroutineBody>
			<symbol> ) <symbol>
			<statements>
			</statements>
			<keyword> if <keyword>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<symbol> ( <symbol>
		<IDENTIFIER> y <IDENTIFIER>
		<symbol> ) <symbol>
		<symbol> { <symbol>
		<ParameterList>
			<keyword> do <keyword>
			<IDENTIFIER> Screen <IDENTIFIER>
			<symbol> . <symbol>
		</ParameterList>
		<symbol> ( <symbol>
		<SubroutineBody>
			<IDENTIFIER> x <IDENTIFIER>
			<statements>
			</statements>
			<symbol> ; <symbol>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> do <keyword>
		<IDENTIFIER> Screen <IDENTIFIER>
		<symbol> . <symbol>
		<IDENTIFIER> drawRectangle <IDENTIFIER>
		<ParameterList>
		</ParameterList>
		<IDENTIFIER> x <IDENTIFIER>
		<SubroutineBody>
			<symbol> , <symbol>
			<statements>
			</statements>
			<symbol> , <symbol>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<IDENTIFIER> x <IDENTIFIER>
		<symbol> , <symbol>
		<IDENTIFIER> y <IDENTIFIER>
		<symbol> ) <symbol>
		<ParameterList>
		</ParameterList>
		<keyword> let <keyword>
		<SubroutineBody>
			<IDENTIFIER> y <IDENTIFIER>
			<statements>
			</statements>
			<IDENTIFIER> y <IDENTIFIER>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<symbol> ; <symbol>
		<keyword> do <keyword>
		<IDENTIFIER> Screen <IDENTIFIER>
		<symbol> . <symbol>
		<ParameterList>
		</ParameterList>
		<symbol> ( <symbol>
		<SubroutineBody>
			<IDENTIFIER> x <IDENTIFIER>
			<statements>
			</statements>
			<symbol> ; <symbol>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> do <keyword>
		<IDENTIFIER> Screen <IDENTIFIER>
		<symbol> . <symbol>
		<IDENTIFIER> drawRectangle <IDENTIFIER>
		<ParameterList>
		</ParameterList>
		<IDENTIFIER> x <IDENTIFIER>
		<SubroutineBody>
			<symbol> , <symbol>
			<statements>
			</statements>
			<symbol> , <symbol>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<IDENTIFIER> x <IDENTIFIER>
		<symbol> , <symbol>
		<IDENTIFIER> y <IDENTIFIER>
		<symbol> ) <symbol>
		<ParameterList>
		</ParameterList>
		<symbol> } <symbol>
		<SubroutineBody>
			<keyword> return <keyword>
			<statements>
			</statements>
			<symbol> } <symbol>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<keyword> method <keyword>
		<keyword> void <keyword>
		<IDENTIFIER> moveDown <IDENTIFIER>
		<symbol> ( <symbol>
		<ParameterList>
		</ParameterList>
		<symbol> ) <symbol>
		<SubroutineBody>
			<symbol> { <symbol>
			<statements>
				<ifStatement>
					<keyword> if <keyword>
					<symbol> ( <symbol>
					<expression>
						<IDENTIFIER> y <IDENTIFIER>
					</expression>
					<IDENTIFIER> y <IDENTIFIER>
					<symbol> ) <symbol>
					<statements>
					</statements>
					<keyword> do <keyword>
				</ifStatement>
			</statements>
			<symbol> . <symbol>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<IDENTIFIER> setColor <IDENTIFIER>
		<symbol> ( <symbol>
		<IDENTIFIER> x <IDENTIFIER>
		<symbol> ) <symbol>
		<ParameterList>
		</ParameterList>
		<keyword> do <keyword>
		<SubroutineBody>
			<IDENTIFIER> Screen <IDENTIFIER>
			<statements>
			</statements>
			<IDENTIFIER> drawRectangle <IDENTIFIER>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<symbol> ( <symbol>
		<IDENTIFIER> x <IDENTIFIER>
		<symbol> , <symbol>
		<IDENTIFIER> y <IDENTIFIER>
		<ParameterList>
		</ParameterList>
		<IDENTIFIER> x <IDENTIFIER>
		<SubroutineBody>
			<symbol> , <symbol>
			<statements>
			</statements>
			<symbol> ) <symbol>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<symbol> ; <symbol>
		<keyword> let <keyword>
		<IDENTIFIER> y <IDENTIFIER>
		<symbol> = <symbol>
		<ParameterList>
		</ParameterList>
		<symbol> ; <symbol>
		<SubroutineBody>
			<keyword> do <keyword>
			<statements>
			</statements>
			<symbol> . <symbol>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<IDENTIFIER> setColor <IDENTIFIER>
		<symbol> ( <symbol>
		<IDENTIFIER> x <IDENTIFIER>
		<symbol> ) <symbol>
		<ParameterList>
		</ParameterList>
		<keyword> do <keyword>
		<SubroutineBody>
			<IDENTIFIER> Screen <IDENTIFIER>
			<statements>
			</statements>
			<IDENTIFIER> drawRectangle <IDENTIFIER>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<symbol> ( <symbol>
		<IDENTIFIER> x <IDENTIFIER>
		<symbol> , <symbol>
		<IDENTIFIER> y <IDENTIFIER>
		<ParameterList>
		</ParameterList>
		<IDENTIFIER> x <IDENTIFIER>
		<SubroutineBody>
			<symbol> , <symbol>
			<statements>
			</statements>
			<symbol> ) <symbol>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<symbol> ; <symbol>
		<symbol> } <symbol>
		<keyword> return <keyword>
		<symbol> ; <symbol>
		<ParameterList>
		</ParameterList>
		<keyword> method <keyword>
		<SubroutineBody>
			<keyword> void <keyword>
			<statements>
			</statements>
			<symbol> ( <symbol>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<symbol> ) <symbol>
		<symbol> { <symbol>
		<keyword> if <keyword>
		<symbol> ( <symbol>
		<ParameterList>
		</ParameterList>
		<symbol> ) <symbol>
		<SubroutineBody>
			<symbol> { <symbol>
			<statements>
				<doStatement>
					<keyword> do <keyword>
					<IDENTIFIER> Screen <IDENTIFIER>
					<symbol> . <symbol>
					<IDENTIFIER> setColor <IDENTIFIER>
					<symbol> ( <symbol>
					<IDENTIFIER> x <IDENTIFIER>
					<symbol> ) <symbol>
				</doStatement>
			</statements>
			<keyword> do <keyword>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<IDENTIFIER> Screen <IDENTIFIER>
		<symbol> . <symbol>
		<IDENTIFIER> drawRectangle <IDENTIFIER>
		<symbol> ( <symbol>
		<ParameterList>
		</ParameterList>
		<symbol> , <symbol>
		<SubroutineBody>
			<IDENTIFIER> y <IDENTIFIER>
			<statements>
			</statements>
			<IDENTIFIER> x <IDENTIFIER>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<symbol> , <symbol>
		<IDENTIFIER> y <IDENTIFIER>
		<symbol> ) <symbol>
		<symbol> ; <symbol>
		<ParameterList>
			<keyword> let <keyword>
			<IDENTIFIER> x <IDENTIFIER>
			<symbol> = <symbol>
		</ParameterList>
		<symbol> ; <symbol>
		<SubroutineBody>
			<keyword> do <keyword>
			<statements>
			</statements>
			<symbol> . <symbol>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<IDENTIFIER> setColor <IDENTIFIER>
		<symbol> ( <symbol>
		<IDENTIFIER> x <IDENTIFIER>
		<symbol> ) <symbol>
		<ParameterList>
		</ParameterList>
		<keyword> do <keyword>
		<SubroutineBody>
			<IDENTIFIER> Screen <IDENTIFIER>
			<statements>
			</statements>
			<IDENTIFIER> drawRectangle <IDENTIFIER>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<symbol> ( <symbol>
		<IDENTIFIER> x <IDENTIFIER>
		<symbol> , <symbol>
		<IDENTIFIER> y <IDENTIFIER>
		<ParameterList>
		</ParameterList>
		<IDENTIFIER> x <IDENTIFIER>
		<SubroutineBody>
			<symbol> , <symbol>
			<statements>
			</statements>
			<symbol> ) <symbol>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<symbol> ; <symbol>
		<symbol> } <symbol>
		<keyword> return <keyword>
		<symbol> ; <symbol>
		<ParameterList>
		</ParameterList>
		<keyword> method <keyword>
		<SubroutineBody>
			<keyword> void <keyword>
			<statements>
			</statements>
			<symbol> ( <symbol>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<symbol> ) <symbol>
		<symbol> { <symbol>
		<keyword> if <keyword>
		<symbol> ( <symbol>
		<ParameterList>
		</ParameterList>
		<symbol> ) <symbol>
		<SubroutineBody>
			<symbol> { <symbol>
			<statements>
				<doStatement>
					<keyword> do <keyword>
					<IDENTIFIER> Screen <IDENTIFIER>
					<symbol> . <symbol>
					<IDENTIFIER> setColor <IDENTIFIER>
					<symbol> ( <symbol>
					<IDENTIFIER> x <IDENTIFIER>
					<symbol> ) <symbol>
				</doStatement>
			</statements>
			<keyword> do <keyword>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<IDENTIFIER> Screen <IDENTIFIER>
		<symbol> . <symbol>
		<IDENTIFIER> drawRectangle <IDENTIFIER>
		<symbol> ( <symbol>
		<ParameterList>
		</ParameterList>
		<symbol> , <symbol>
		<SubroutineBody>
			<IDENTIFIER> y <IDENTIFIER>
			<statements>
			</statements>
			<IDENTIFIER> x <IDENTIFIER>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<symbol> , <symbol>
		<IDENTIFIER> y <IDENTIFIER>
		<symbol> ) <symbol>
		<symbol> ; <symbol>
		<ParameterList>
			<keyword> let <keyword>
			<IDENTIFIER> x <IDENTIFIER>
			<symbol> = <symbol>
		</ParameterList>
		<symbol> ; <symbol>
		<SubroutineBody>
			<keyword> do <keyword>
			<statements>
			</statements>
			<symbol> . <symbol>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<IDENTIFIER> setColor <IDENTIFIER>
		<symbol> ( <symbol>
		<IDENTIFIER> x <IDENTIFIER>
		<symbol> ) <symbol>
		<ParameterList>
		</ParameterList>
		<keyword> do <keyword>
		<SubroutineBody>
			<IDENTIFIER> Screen <IDENTIFIER>
			<statements>
			</statements>
			<IDENTIFIER> drawRectangle <IDENTIFIER>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<symbol> ( <symbol>
		<IDENTIFIER> x <IDENTIFIER>
		<symbol> , <symbol>
		<IDENTIFIER> y <IDENTIFIER>
		<ParameterList>
		</ParameterList>
		<IDENTIFIER> x <IDENTIFIER>
		<SubroutineBody>
			<symbol> , <symbol>
			<statements>
			</statements>
			<symbol> ) <symbol>
		</SubroutineBody>
	</subroutineDec>
	<subroutineDec>
		<symbol> ; <symbol>
		<symbol> } <symbol>
		<keyword> return <keyword>
		<symbol> ; <symbol>
		<ParameterList>
		</ParameterList>
		<symbol> } <symbol>
		<SubroutineBody>
			<symbol>  <symbol>
			<statements>
			</statements>
			<symbol>  <symbol>
		</SubroutineBody>
	</subroutineDec>
	<symbol>  <symbol>
</class>
