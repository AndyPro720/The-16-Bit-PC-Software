/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */

class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int n, i;
        let twoToThe = Array.new(16);
        
        let n = 0;
        let i = 1;
        while (n < 16) {
            let twoToThe[n] = i;
            let i = i + i;
            let n = n + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        else {
            return x;
        }
    }

    /** Returns the product of x and y */
    function int multiply(int x, int y)  {
        var int sum, i;
        let sum = 0;

       //edge cases 
        if ((x = 0) | (y = 0)) {
            return 0;
        }
        
        let i = 0;
        while (i < 16) {
            if (Math.bit(y, i)) {  //check if the ith bit is set
                let sum = sum + x; //add shifted multiplicand to sum
            }
           let x = x + x; //left shift
           let i = i + 1;
        }
            
        return sum;
    }

    /** Divides two integers. Handles negative numbers. */
    function int divide(int x, int y) {
        var int q;

        if (y = 0) {
            do Sys.error(3); // Error for division by zero
            return 0;
        }

        let q = Math._div(Math.abs(x), Math.abs(y));

        if ((x < 0) = (y < 0)) {
            return q;
        }
        else {
            return -q;
        }
    }

    /** Recursively divides two positive integers. (Helper function) */
    function int _div(int x, int y) {
        var int q, sum;

        if ((y > x) | (y < 0)) {
            return 0;
        }

        else {
            let q = Math._div(x, y + y);
        }

        let sum = q + q; // 2*q.

        if ((x - (sum * y)) < y) {
            return sum;
        }

        else {
            return sum + 1;
        }
    } 

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, potentialRoot, square;

        if (x < 0) {
        do Sys.error(4); // Error code  for invalid argument to sqrt
        return 0;
        }
        let y = 0;
        let j = 7;

        while (j > -1) {
            // Calculate what the root would be if we include the j'th bit.
            let potentialRoot = y + twoToThe[j];
            let square = Math.multiply(potentialRoot, potentialRoot);

            // Check for overflow and if the square is still within x.
            // The (square > 0) check handles the overflow case.
            if (~(square > x) & (square > 0)) { //square <= x
                let y = potentialRoot;
            }

            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns true if ith bit of x is 1, false otherwise */
    function boolean bit(int x, int i) {
       if (x & twoToThe[i]) {
           return true;
       }
       else {
           return false;
       } 
    } 
   

}
